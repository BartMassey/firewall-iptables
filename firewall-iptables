#!/bin/sh
#
# IP Firewall script for Linux and iptables
#
# Copyright (C) 2001  Oskar Andreasson <blueflux@koffein.net>
# Extensively rewritten by Bart Massey <bart@cs.pdx.edu> 2001-.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program or from the site that you downloaded it
# from; if not, write to the Free Software Foundation, Inc., 59 Temple
# Place, Suite 330, Boston, MA  02111-1307   USA
#

#
# To configure this, you mostly just need to set the
# interface names of your network interfaces.  Set all the
# configuration variables below.
#

#
# For security purposes, give the full pathnames of
# the iptables commands.
#
IPTABLES="/sbin/iptables"
IP6TABLES="/sbin/ip6tables"

#
# Where this script and its auxiliaries live. Not something
# you would normally change.
# 
ETC=/etc/firewall

#
# File containing modules to be explicitly loaded. You
# probably want to use this because Linux fails to autoload
# some crucial modules.
#
IPTABLES_MODULES="$ETC/iptables-modules"

#
# Structure of your internal network.
#
INT_RANGE="192.168.0.0/16"

#
# Names of your external interfaces. These will be
# autoconfigured.  It is harmless to give a nonexistent name
# for an interface: this will be discovered on startup, and
# handled as if the interface is not present. It is also
# harmless to comment out an interface, which will then not
# be checked for.
#

# Primary external interface. You must have a primary interface.
INET_IFACE="ext0"
# External interface, or IP alias
# on the first interface. You may choose to
# comment interfaces other than the primary external out; if
# not, this script will autodetect whether they are present.
INET2_IFACE="ext0:1"
# NAT interface, necessarily an IP alias. You may choose to
# comment interfaces other than the primary external out; if
# not, this script will autodetect whether they are present.
INETA1_IFACE="ext0:0"
# NAT interface, necessarily an IP alias. You may choose to
# comment interfaces other than the primary external out; if
# not, this script will autodetect whether they are present.
INETA2_IFACE="ext0:2"
# Trusted interfaces. Set to empty string if none.
#TRUSTED_IFACE="ent0 ent1 ept0 br0 exx0"
TRUSTED_IFACE="ent0"
# Name of your local interface. You shouldn't even need to
# set this; some UNIXes call it "lo" and some "lo0", is all.
LO_IFACE="lo"

#
# Make sure we can run.
#
if [ -x $IPTABLES ]
then
    :
else
    echo "$0: can't find $IPTABLES" >&2
    exit 1
fi

#
# Hook for optional traffic-shaping / smart queue management script.
#
#TC="$ETC/sqm"
#[ -x "$TC" ] || TC=":"
TC=":"

#
# Look for the interfaces.
#
eval "`\"$ETC/examine-interface\" INET \"$INET_IFACE\"`"
if $INET
then
    :
else
    echo "$0: no external interface" >&2
    exit 1
fi
eval "`\"$ETC/examine-interface\" INETA1 \"$INETA1_IFACE\"`"
eval "`\"$ETC/examine-interface\" INETA2 \"$INETA2_IFACE\"`"
eval "`\"$ETC/examine-interface\" INET2 \"$INET2_IFACE\"`"

for i in $TRUSTED_IFACE
do
    eval "`\"$ETC/examine-interface\" TRUSTED $i`"
done

#
# Symbolic name for an invariant range.
#
MCAST_RANGE="224.0.0.0/4"

#
# Load all required IPTables modules
#
if [ -r $IPTABLES_MODULES ]
then
    while read MODULE
    do
	/sbin/modprobe $MODULE
    done <$IPTABLES_MODULES
else
    echo "$0: warning: cannot load iptables modules from $IPTABLES_MODULES" >&2
fi

case "$1" in
start|stop)
    ;;
restart|force-reload)
    $0 stop
    $0 start
    exit 0
    ;;
*)
    echo "$0: do not know how to $1. exiting." >&2
    exit 1
    ;;
esac

#
# disable everything
#
$TC stop
$IPTABLES -F
$IPTABLES -t nat -F
$IPTABLES -X
$IPTABLES -t nat -X
$IP6TABLES -X

#
# If we're just stopping, do so now
#
case "$1" in
stop)
    # Make sure all chains are default accept
    $IPTABLES -P INPUT ACCEPT
    $IPTABLES -P OUTPUT ACCEPT
    $IPTABLES -P FORWARD ACCEPT
    $INETA1 && $IPTABLES -A INPUT -d $INETA1_IP -j DROP
    $INETA1 && $IPTABLES -A FORWARD -d $INETA1_IP -j DROP
    $INETA2 && $IPTABLES -A INPUT -d $INETA2_IP -j DROP
    $INETA2 && $IPTABLES -A FORWARD -d $INETA2_IP -j DROP
    $INET2 && $IPTABLES -A INPUT -d $INET2_IP -j DROP
    $INET2 && $IPTABLES -A FORWARD -d $INET2_IP -j DROP
    # Accept IPv6 traffic, but do not forward it
    $IP6TABLES -P INPUT ACCEPT
    $IP6TABLES -P OUTPUT ACCEPT
    $IP6TABLES -P FORWARD DROP
    $IP6TABLES -A FORWARD -j LOG \
      --log-level debug --log-prefix "IPT IPV6 STOP FWD drop: "
    # Set up outgoing NAT only.
    $IPTABLES -t nat -P OUTPUT ACCEPT
    $IPTABLES -t nat -P PREROUTING ACCEPT
    $INET2 && $IPTABLES -t nat -A POSTROUTING -o $INET2_IFACE -j SNAT --to-source $INET2_IP
    $INETA1 && $IPTABLES -t nat -A POSTROUTING -o $INETA1_IFACE -j SNAT --to-source $INETA1_IP
    $INETA2 && $IPTABLES -t nat -A POSTROUTING -o $INETA2_IFACE -j SNAT --to-source $INETA2_IP
    $IPTABLES -t nat -A POSTROUTING -o $INET_IFACE -j SNAT --to-source $INET_IP
    exit 0
    ;;
esac

#
# Enable ip_forward, this is critical since it is turned off
# by default in Linux. You can and should also set this in
# /etc/sysctl.d/ somewhere.
#
echo "1" > /proc/sys/net/ipv4/ip_forward

#
# Set default policies for the built-in chains
#
$IPTABLES -P INPUT DROP
$IPTABLES -P OUTPUT ACCEPT
$IPTABLES -P FORWARD DROP
$IPTABLES -t nat -P PREROUTING ACCEPT
$IPTABLES -t nat -P OUTPUT ACCEPT
# Accept IPv6 traffic, but do not forward it
$IP6TABLES -P INPUT ACCEPT
$IP6TABLES -P OUTPUT ACCEPT
$IP6TABLES -P FORWARD DROP
$IP6TABLES -A FORWARD -j LOG \
  --log-level debug --log-prefix "IPT IPV6 FWD drop: "

#
# NAT PREROUTING chain.
#
# bartfan all
$INETA1 && $IPTABLES -t nat -A PREROUTING \
      -i $INET_IFACE -d $INETA1_IP -j DNAT --to 192.168.1.7
# bartx all
$INETA2 && $IPTABLES -t nat -A PREROUTING \
      -i $INET_IFACE -d $INETA2_IP -j DNAT --to 192.168.1.50
# benserv all
$INET2 && $IPTABLES -t nat -A PREROUTING \
      -i $INET_IFACE -d $INET2_IP -j DNAT --to 192.168.1.47

#
# NAT OUTPUT chain.
#
# bartfan all
$INETA1 && $IPTABLES -t nat -A OUTPUT \
      -d $INETA1_IP -j DNAT --to 192.168.1.7
# bartx all
$INETA2 && $IPTABLES -t nat -A OUTPUT \
      -d $INETA2_IP -j DNAT --to 192.168.1.50
# benserv all
$INET2 && $IPTABLES -t nat -A OUTPUT \
      -d $INET2_IP -j DNAT --to 192.168.1.47

#
# NAT POSTROUTING chain
#
# External interface.
# Special hosts get their own IP.
$INETA1 && $IPTABLES -t nat -A POSTROUTING \
  -s 192.168.1.7 -o $INET_IFACE -j SNAT --to-source $INETA1_IP
$INETA2 && $IPTABLES -t nat -A POSTROUTING \
  -s 192.168.1.50 -o $INET_IFACE -j SNAT --to-source $INETA2_IP
$INET2 && $IPTABLES -t nat -A POSTROUTING \
  -s 192.168.1.47 -o $INET_IFACE -j SNAT --to-source $INET2_IP
# All others get the default IP.
$IPTABLES -t nat -A POSTROUTING \
  -o $INET_IFACE -j SNAT --to-source $INET_IP

#
# New not-syn packets should be dropped.
#
$IPTABLES -N tcp_checks
$IPTABLES -A tcp_checks -p tcp --syn -j RETURN
$IPTABLES -A tcp_checks -p tcp -m state --state ESTABLISHED,RELATED -j RETURN
#$IPTABLES -A tcp_checks -j LOG \
#  --log-level debug --log-prefix "IPT unknown TCP non-SYN: "
$IPTABLES -A tcp_checks -j DROP

#
# Take care of bad TCP packets that we don't want
#
$IPTABLES -N tcp_packets
# Do checks
$IPTABLES -A tcp_packets -p tcp -j tcp_checks
# echo
$IPTABLES -A tcp_packets -p tcp --dport 7 -j ACCEPT
# ftp
$IPTABLES -A tcp_packets -p tcp --dport 21 -j ACCEPT
# ssh
$IPTABLES -A tcp_packets -p tcp --dport 22 -j ACCEPT
# smtp
$IPTABLES -A tcp_packets -p tcp --dport 25 -j ACCEPT
# DNS
$IPTABLES -A tcp_packets -p tcp --dport 53 -j ACCEPT
# http
$IPTABLES -A tcp_packets -p tcp --dport 80 -j ACCEPT
# auth
$IPTABLES -A tcp_packets -p tcp --dport 113 -j ACCEPT
# https
$IPTABLES -A tcp_packets -p tcp --dport 443 -j ACCEPT
# ipp
$IPTABLES -A tcp_packets -p tcp --dport 631 -j ACCEPT
# h323/h225 host call
$IPTABLES -A tcp_packets -p tcp --dport 1720 -j ACCEPT
# my gnunet node
$IPTABLES -A tcp_packets -p tcp --dport 2086 -j ACCEPT
# BitWise IM
$IPTABLES -A tcp_packets -p tcp --dport 4137 -j ACCEPT
# bzflag
$IPTABLES -A tcp_packets -p tcp --dport 5155 -j ACCEPT
# TauNet
$IPTABLES -A tcp_packets -p tcp --dport 6283 -j ACCEPT
# DAPHNE
$IPTABLES -A tcp_packets -p tcp --dport 6881 -j ACCEPT
# Terraria
$IPTABLES -A tcp_packets -p tcp --dport 7777 -j ACCEPT
# NBD
$IPTABLES -A tcp_packets -p tcp --dport 10809 -j ACCEPT
# freenet node
$IPTABLES -A tcp_packets -p tcp --dport 21339 -j ACCEPT
# Minecraft
$IPTABLES -A tcp_packets -p tcp --dport 25565 -j ACCEPT
$IPTABLES -A tcp_packets -p tcp --dport 25566 -j ACCEPT
# GlassPlateGame
$IPTABLES -A tcp_packets -p tcp --dport 27000 -j ACCEPT
$IPTABLES -A tcp_packets -p tcp --dport 27001 -j ACCEPT
$IPTABLES -A tcp_packets ! -i $INET_IFACE -j LOG --log-level debug \
  --log-prefix "IPT TCP pkt died: "
$IPTABLES -A tcp_packets -j DROP

#
# UDP ports
#
$IPTABLES -N udp_packets
$IPTABLES -A udp_packets -p udp --dport 53 -j ACCEPT
$IPTABLES -A udp_packets -p udp --source-port 53 -j ACCEPT
# IPP: we'll kill it later if it's going to the wrong place
$IPTABLES -A udp_packets -p udp --source-port 631 -j ACCEPT
# NTP
$IPTABLES -A udp_packets -p udp --source-port 123 -j ACCEPT
# BitWise IM
$IPTABLES -A udp_packets -p udp --source-port 4137 -j ACCEPT
# my gnunet node
$IPTABLES -A udp_packets -p udp --source-port 2086 -j ACCEPT
# Skype
$IPTABLES -A udp_packets -p udp --source-port 49511 -j ACCEPT
# MDNS
$IPTABLES -A udp_packets -p udp --dport 5353 -j ACCEPT
# Terraria
$IPTABLES -A udp_packets -p udp --dport 7777 -j ACCEPT
# Minecraft
$IPTABLES -A udp_packets -p udp --dport 25565 -j ACCEPT
$IPTABLES -A udp_packets -p udp --dport 25566 -j ACCEPT
# drop everything else with logging
$IPTABLES -A udp_packets -p udp ! -i $INET_IFACE -j LOG --log-level debug \
  --log-prefix "IPT UDP pkt died: "
$IPTABLES -A udp_packets -p udp -j DROP

#
# ICMP rules. Create a separate chain for these.
#
$IPTABLES -N icmp_packets
$IPTABLES -A icmp_packets -p icmp --icmp-type 8 -j ACCEPT
$IPTABLES -A icmp_packets -p icmp --icmp-type 11 -j ACCEPT
$IPTABLES -A icmp_packets -p icmp -j DROP

#
# Always forward packets from the external IP.
#
$INETA1 && $IPTABLES -A FORWARD -s $INETA1_IP -j ACCEPT
$INETA2 && $IPTABLES -A FORWARD -s $INETA2_IP -j ACCEPT
$INET2 && $IPTABLES -A FORWARD -s $INET2_IP -j ACCEPT

#
# Always forward packets from trusted interfaces.
#
for i in $TRUSTED_IFACE
do
    $IPTABLES -A FORWARD -i $i -j ACCEPT
done

#
# Find TCP packets we want to forward.
#
$IPTABLES -A FORWARD -m state --state ESTABLISHED,RELATED -j ACCEPT 
$IPTABLES -A FORWARD -p tcp -j tcp_packets
$IPTABLES -A FORWARD -p udp -j udp_packets
$IPTABLES -A FORWARD -p icmp -j icmp_packets
#$IPTABLES -A FORWARD -m conntrack --ctstate limit --limit 3/minute --limit-burst 3 -j LOG \
#  --log-level debug --log-prefix "IPT FORWARD packet died: "

#
# Drop SSH attack packets.
#
$IPTABLES -N ssh_reject
#$IPTABLES -A ssh_reject -j LOG \
#  --log-level debug --log-prefix "IPT SSH reject: "
$IPTABLES -A ssh_reject -j DROP

#
# INPUT chain
#

# If the packet comes from a trusted or partially-trusted
# network, accept it blindly.
for i in $TRUSTED_IFACE
do
    $IPTABLES -A INPUT -i $i -j ACCEPT
done

# Drop external packets intended for the IP alias at this point,
# since they should have already been dealt with.
if $INETA1
then
    $IPTABLES -A INPUT -d $INETA1_IP ! -i $INET_IFACE -j LOG \
      --log-level debug --log-prefix "IPT missed hole: "
    $IPTABLES -A INPUT -d $INETA1_IP -j DROP
fi
if $INETA2
then
    $IPTABLES -A INPUT -d $INETA2_IP ! -i $INET_IFACE -j LOG \
      --log-level debug --log-prefix "IPT missed hole: "
    $IPTABLES -A INPUT -d $INETA2_IP -j DROP
fi
if $INET2
then
    $IPTABLES -A INPUT -d $INET2_IP ! -i $INET_IFACE -j LOG \
      --log-level debug --log-prefix "IPT missed hole: "
    $IPTABLES -A INPUT -d $INET2_IP -j DROP
fi
$IPTABLES -A INPUT -i $LO_IFACE -j ACCEPT
# Use iptables to stop ssh password guessing attacks
# Thanks http://www.linuxmanagers.org/pipermail/linuxmanagers/2005-April/001752.html
$IPTABLES -A INPUT -i $INET_IFACE \
  -p tcp --dport 22 --syn -m conntrack --ctstate recent --name sshattack \
  --set
$IPTABLES -A INPUT -i $INET_IFACE \
  -p tcp --dport 22 --syn -m conntrack --ctstate recent --name sshattack \
  --rcheck --seconds 600 --hitcount 20 -j ssh_reject
# Do some checks for obviously spoofed IP's, and accept
# established connections.
#$IPTABLES -A INPUT -i $INET_IFACE -s $INT_RANGE \
#  -m conntrack --ctstate limit --limit 3/minute --limit-burst 3 -j LOG \
#  --log-level debug --log-prefix "IPT spoofed packet died: "
$IPTABLES -A INPUT -i $INET_IFACE -s $INT_RANGE -j DROP
$IPTABLES -A INPUT -d $INET_IP \
  -m state --state ESTABLISHED,RELATED -j ACCEPT
# Rules for incoming packets from the internet.
$IPTABLES -A INPUT -i $INET_IFACE -d $INET_IP -j ACCEPT
$IPTABLES -A INPUT -p icmp -i $INET_IFACE -j icmp_packets
$IPTABLES -A INPUT -p tcp -i $INET_IFACE -j tcp_checks
$IPTABLES -A INPUT -i $INET_IFACE -j ACCEPT

# If we make it this far down the INPUT chain,
# log and take the default DROP.
$IPTABLES -A INPUT -m conntrack --ctstate limit --limit 1/minute --limit-burst 3 \
  -j LOG --log-level debug --log-prefix "IPT INPUT packet died: "
$IPTABLES -A INPUT -j DROP

#
# Drop IPP packets out the external interfaces
# because CUPS sucks and cannot.
# http://cups.org/str.php?L3020+P0+S-2+C0+I0+E0+M1000+Q
#
$IPTABLES -A OUTPUT -p udp --sport 631 -o $INET_IFACE -j DROP
$IPTABLES -A OUTPUT -p tcp --sport 631 -o $INET_IFACE -j DROP

$TC start
